#include<iostream>
#include<vector>
#include<string>
#include<fstream>
using namespace std;
template<typename T1,typename T2>
class Stu
{
public:
    Stu();
    Stu(T1 Name,T1 Id,T1 Sex,T2 Age,T1 Email,T1 Classes,T2 Score);
    ~Stu(){}
    T1 getid();
    T1 getclasses();
    void show();
    T1 getname();
    T2 getscore();
    void change();
    //friend ostream& operator<<(ostream& o,const Stu &p);

    //friend istream& operator>>(istream& i,Stu &p);
    //template<typename T1,typename T2>
    //friend void read(vector<Stu<T1,T2> > &v);
    //template<typename T1,typename T2>
    //friend void save(vector<Stu<T1,T2> > &v);
private:
    T1 name;
    T1 id;
    T2 age;
    T1 classes;
    T1 sex;
    T1 email;
    T2 score;


};
template<typename T1,typename T2>
Stu<T1,T2>::Stu()
{
    cout<<"please enter the name:"<<endl;
    cin>>name;
    cout<<"the id:"<<endl;
    cin>>id;
    cout<<"the sex:"<<endl;
    cin>>sex;
    cout<<"the age:"<<endl;
    cin>>age;
        if(!cin)
        {
            throw 2;
        }

    cout<<"the email:"<<endl;
    cin>>email;
    cout<<"the class:"<<endl;
    cin>>classes;
    cout<<"the score:"<<endl;
    cin>>score;
        if(!cin)
        {
            throw 2;
        }
}
template<typename T1,typename T2>
Stu<T1,T2>::Stu(T1 Name,T1 Id,T1 Sex,T2 Age,T1 Email,T1 Classes,T2 Score)
{
    name=Name;
    id=Id;
    sex=Sex;
    age=Age;
    email=Email;
    classes=Classes;
    score=Score;
}
template<typename T1,typename T2>
void Stu<T1,T2>::change()         /*********************        change           *******************/
{

    cout<<"输入新姓名:"<<endl;
    cin>>name;
    cout<<"新学号:"<<endl;
    cin>>id;
    cout<<"新性别:"<<endl;
    cin>>sex;
    cout<<"新年龄:"<<endl;
    cin>>age;
    if(!cin)
        {
            throw 2;
        }

    cout<<"新email:"<<endl;
    cin>>email;
    cout<<"新班级:"<<endl;
    cin>>classes;
    cout<<"新分数:"<<endl;
    cin>>score;
    if(!cin)
        {
            throw 2;
        }
    cout<<"/**  更改完成  **/"<<endl;
}
template<typename T1,typename T2>
void Stu<T1,T2>::show()               /*************        show           **********************/
{
    cout<<name<<"    "<<id<<"    "<<sex<<"    "<<age<<"    "<<email<<"    "<<classes<<"    "<<score<<endl;
}
template<typename T1,typename T2>
T1 Stu<T1,T2>::getname()        /**********************        getname            ********************/
{
    return name;
}
template<typename T1,typename T2>
T1 Stu<T1,T2>::getid()         /****************                 getid              ******************/
{
    return id;
}
template<typename T1,typename T2>
T1 Stu<T1,T2>::getclasses()               /********************            getclasses          ******************/
{
    return classes;
}
template<typename T1,typename T2>
T2 Stu<T1,T2>::getscore()            /*****************         getscore                *******************/
{
    return score;
}
                                                        /********************************       add              *******************/
template<typename T1,typename T2>
void add(vector<Stu<T1,T2> > &v)
{
    T1 name,id,sex,email,classes;
    T2 score,age;
        cout<<"输入姓名:"<<endl;
        cin>>name;
        cout<<"学号:"<<endl;
        cin>>id;
        cout<<"性别:"<<endl;
        cin>>sex;
        cout<<"年龄:"<<endl;
        cin>>age;
        if(!cin)
            throw 2;
        cout<<"email:"<<endl;
        cin>>email;
        cout<<"班级:"<<endl;
        cin>>classes;
        cout<<"分数:"<<endl;
        cin>>score;
        if(!cin)
            throw 2;
        Stu<string,int> stu(name,id,sex,age,email,classes,score);
        v.push_back(stu);
        cout<<"/****    成功添加   ****/"<<endl;
}
                                                        /*********************         del             ************************/
template<typename T1,typename T2>
void del(vector<Stu<T1,T2> > &v)
{
    string Name;
    int n=1;
    typename vector<Stu<T1,T2> >::iterator p;
    cout<<"输入姓名 :"<<endl;
    cin>>Name;
    for(p=v.begin();p!=v.end();p++)
        {
        if(p->getname()==Name)
            {
            v.erase(p);
            cout<<"/***     成功删除~    ***/"<<endl;
            n=0;
            break;
            }
    //if((v.rbegin()->getname())==Name)
        //v.pop_back();
        //else
            //cout<<"/*****   can't find it    ******/"<<endl;
        }
    if(n)
        cout<<"/*****   查无此人    ******/"<<endl;
}
                                                    /*******************             mod               *******************/
template<typename T1,typename T2>
void mod(vector<Stu<T1,T2> > &v)
{
    string Id;
    int n=1;
    typename vector<Stu<T1,T2> >::iterator p;
    cout<<"enter the id :"<<endl;
    cin>>Id;
    for(p=v.begin();p!=v.end();p++)
        {
            if(p->getid()==Id)
            {
                cout<<"/*****    find it     *****/"<<endl;
                p->change();n=0;
            }
        }
    if(n)
        cout<<"/*****   查无此人    ******/"<<endl;

}
                                                /******************           lookup by id          *****************/
template<typename T1,typename T2>
void lookupbyid(vector<Stu<T1,T2> > &v)
{
    string Id;
    int n=1;
    typename vector<Stu<T1,T2> >::iterator p;
    cout<<"输入学号 :"<<endl;
    cin>>Id;
    for(p=v.begin();p!=v.end();p++)
        if(p->getid()==Id)
            {
                cout<<"/*****    find it     *****/"<<endl;
                cout<<"姓名    学号    性别    年龄    email    班级    分数"<<endl;
                p->show();n=0;
            }
    if(n)
        cout<<"/*****    查无此人    ******/"<<endl;
}
                                            /*****************            lookup by class         *******************/
template<typename T1,typename T2>
void lookupbyclass(vector<Stu<T1,T2> > &v)
{
    string Classes;
    int n=1;
    typename vector<Stu<T1,T2> >::iterator p;
    cout<<"输入班级 :"<<endl;
    cin>>Classes;
    for(p=v.begin();p!=v.end();p++)
        if(p->getclasses()==Classes)
            {
                cout<<"/*******    find it      **********/"<<endl;
                cout<<"姓名    学号    性别    年龄    email    班级    分数"<<endl;
                p->show();
                n=0;
            }
    if(n)
        cout<<"/*****   查无此人    ******/"<<endl;
}
                                                /***********************         lookup          ********************/
template<typename T1,typename T2>
void lookup(vector<Stu<T1,T2> > &v)
{
    char code;
    cout<<"选择查询方式："<<endl;
    cout<<"1.按学号查询"<<endl;
    cout<<"2.按班级查询"<<endl;
    cin>>code;
    switch(code)
    {
        case '1':   lookupbyid(v);break;
        case '2':   lookupbyclass(v);break;
        default:    cout<<"错误的操作码"<<endl;break;
    }
}



                                                /************************   show all    **************************/
template<typename T1,typename T2>
void showall(vector<Stu<T1,T2> > &v)
{
    typename vector<Stu<T1,T2> >::iterator p;
    if(v.size()==0)
        cout<<"暂时无数据"<<endl;
    for(p=v.begin();p!=v.end();p++)
        {
        cout<<"姓名    学号    性别    年龄    email    班级    分数"<<endl;
        p->show();
        }
}
                                            /*********************       statistic         ****************************/
template<typename T1,typename T2>
void sta(vector<Stu<T1,T2> > &v)
{
    int n;
    float totalscore=0.0;
    float pass=0.0;
    float total=0.0;
    typename vector<Stu<T1,T2> >::iterator p;
                                    /****************        计算总分，及格人数，总人数        *****************/
    for(p=v.begin();p!=v.end();p++)
    {
        total++;
        n=p->getscore();
        totalscore+=(float)n;
        if(n>59)
            pass++;
    }
    cout<<"平均分为:"<<totalscore/total<<endl;
    cout<<"及格率为:"<<100*pass/total<<"%"<<endl;
}
/*template<typename T1,typename T2>
istream& operator>>(istream& i,Stu<T1,T2> p)
{
    i>>p.name>>p.id>>p.sex>>p.age>>p.email>>p.classes>>p.score;
    return i;
}
template<typename T1,typename T2>
ostream& operator<<(ostream& o, const Stu<T1,T2> p)
{
    o<<p.name<<p.id<<p.sex<<p.age<<p.email<<p.classes<<p.score;
    return o;
}*/
/*template<typename T1,typename T2>
void read(vector<Stu<T1,T2> > &v)
{
    Stu<T1,T2> stu("no","no","no",0,"no","no",0);
    ifstream file("Stu.dat");
    while(!file.eof())
    {
    file>>stu.name>>stu.id>>stu.sex>>stu.age>>stu.email>>stu.classes>>stu.score;
    v.push_back(stu);
    }
}
template<typename T1,typename T2>
void save(vector<Stu<T1,T2> > &v)
{
    ofstream OutFile("Stu.dat", ios::out|ios::binary );
    typename vector<Stu<T1,T2> >::iterator p;
    for(p=v.begin();p!=v.end();p++)
    {OutFile<<p->name<<p->id<<p->sex<<p->age<<p->email<<p->classes<<p->score;}
    OutFile.close();
}*/
int main()
{   char code;
    vector<Stu<string,int> >v;
    vector<Stu<string,int> >::iterator p;
do
    {
    cout<<"/*******************************************************/"<<endl;
    cout<<"/***********         选择操作         ******************/"<<endl;
    cout<<"/***********          1.添加          ******************/"<<endl;
    cout<<"/***********          2.删除          ******************/"<<endl;
    cout<<"/***********          3.修改          ******************/"<<endl;
    cout<<"/***********          4.查找          ******************/"<<endl;
    cout<<"/***********          5.统计          ******************/"<<endl;
    cout<<"/***********          6.显示全部      ******************/"<<endl;
   // cout<<"/***********          7.保存          ******************/"<<endl;
    //cout<<"/***********          8.读取          ******************/"<<endl;
    cout<<"/***********          0.结束          ******************/"<<endl;
    cout<<"/*******************************************************/"<<endl;

    cin>>code;
    switch(code){
        case '1':  try{add(v);break;}catch(int){cout<<"输入有误，请重新输入"<<endl;
                                                    cin.clear();cin.sync();break;}

        case '2':   del(v);break;
        case '3':   try{mod(v);break;} catch(int){cout<<"输入有误，请重新输入"<<endl;
                                                    cin.clear();cin.sync();break;}
        case '4':   lookup(v);break;
        case '5':   sta(v);break;
        case '6':   showall(v);break;
        //case '7':   save(v);break;
        //case '8':   read(v);break;
        case '0':   return 0;
        default:    cout<<"错误的操作码，请重新输入"<<endl;break;



                }


    }while(1);

return 0;
}

